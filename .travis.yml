os: linux
dist: trusty
sudo: false

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gdb
      - python-dbg
      - python3-dbg
      - gcc-6

cache:
  pip: true
  directories:
    - $HOME/.ccache

language: python
python:
  - 2.7
  - 3.6
  - 2.6
  - 3.3
  - 3.4
  - 3.5
  - 3.6-dev
  - 3.7-dev
  - pypy
  - pypy3

env:
  global:
    - USE_CCACHE=1
    - CCACHE_SLOPPINESS=pch_defines,time_macros
    - CCACHE_COMPRESS=1
    - CCACHE_MAXSIZE=100M
    - PATH="/usr/lib/ccache:$PATH"
  matrix:
    - BACKEND=c
    - BACKEND=cpp

matrix:
  include:
    - os: osx
      osx_image: xcode6.4
      env: BACKEND=c PY=2
      python: 2
      language: c
      compiler: clang
      cache: false
    - os: osx
      osx_image: xcode6.4
      env: BACKEND=cpp PY=2
      python: 2
      language: cpp
      compiler: clang
      cache: false
    - os: osx
      osx_image: xcode6.4
      env: BACKEND=c PY=3
      python: 3
      language: c
      compiler: clang
      cache: false
    - os: osx
      osx_image: xcode6.4
      env: BACKEND=cpp PY=3
      python: 3
      language: cpp
      compiler: clang
      cache: false
  allow_failures:
    - python: pypy
    - python: pypy3
    - python: 3.7-dev
  exclude:
    - python: pypy
      env: BACKEND=cpp
    - python: pypy3
      env: BACKEND=cpp

branches:
  only:
    - master
    - release

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      mkdir "$HOME/gcc-symlinks"
      export PATH="$HOME/gcc-symlinks:$PATH"
      ln -s $HOME/gcc-symlinks/gcc /usr/bin/gcc-6
      ln -s $HOME/gcc-symlinks/g++ /usr/bin/gcc-6

      which gcc
      which g++
    fi

  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then # Install Miniconda
      curl -s -o miniconda.sh https://repo.continuum.io/miniconda/Miniconda$PY-latest-MacOSX-x86_64.sh;
      bash miniconda.sh -b -p $HOME/miniconda && rm miniconda.sh;
      export PATH="$HOME/miniconda/bin:$PATH"; hash -r;
      #conda install --quiet --yes nomkl --file=test-requirements.txt --file=test-requirements-cpython.txt;
    fi

install:
  - python -c 'import sys; print("Python %s" % (sys.version,))'
  - if [ -n "${TRAVIS_PYTHON_VERSION##*-dev}" -a -n "${TRAVIS_PYTHON_VERSION##2.6*}" ]; then pip install -r test-requirements.txt $( [ -z "${TRAVIS_PYTHON_VERSION##pypy*}" ] || echo " -r test-requirements-cpython.txt" ) ; fi
  - CFLAGS="-O2 -ggdb -Wall -Wextra $(python -c 'import sys; print("-fno-strict-aliasing" if sys.version_info[0] == 2 else "")')" python setup.py build

before_script: ccache -s || true

script:
  - PYTHON_DBG="python$( python -c 'import sys; print("%d.%d" % sys.version_info[:2])' )-dbg"
  - if $PYTHON_DBG -V >&2; then CFLAGS="-O0 -ggdb" $PYTHON_DBG runtests.py -vv Debugger --backends=$BACKEND; fi
  - if [ "$BACKEND" = "cpp" -a -n "${TRAVIS_PYTHON_VERSION##2.6*}" ]; then pip install pythran; fi
  - CFLAGS="-O2 -ggdb -Wall -Wextra $(python -c 'import sys; print("-fno-strict-aliasing" if sys.version_info[0] == 2 else "")')" python setup.py build_ext -i
  - CFLAGS="-O0 -ggdb -Wall -Wextra" python runtests.py -vv -x Debugger --backends=$BACKEND -j7
